import { Product, Supplier, Employee, StockMove, Settings } from './types';

export const initialSuppliers: Supplier[] = [
  {
    id: 's1',
    name: 'Cervejaria Bahia Ltda',
    cnpj: '12.345.678/0001-90',
    email: 'contato@cervejariabh.com',
    phone: '(71) 3000-1000',
    address: 'Rua das Cervejas, 123 - Salvador/BA',
    paymentTerms: '30 dias',
    deliveryTime: 3,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 's2',
    name: 'Refris Nordeste',
    cnpj: '98.765.432/0001-10',
    email: 'vendas@refrisnordeste.com',
    phone: '(71) 3111-2222',
    address: 'Av. dos Refrigerantes, 456 - Feira de Santana/BA',
    paymentTerms: '15 dias',
    deliveryTime: 2,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 's3',
    name: 'Alambique do Recôncavo',
    cpf: '123.456.789-00',
    email: 'comercial@alambique.com',
    phone: '(75) 3222-3333',
    address: 'Estrada do Cachaça, 789 - Cachoeira/BA',
    paymentTerms: 'À vista',
    deliveryTime: 1,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 's4',
    name: 'Distribuidora de Bebidas Premium',
    cnpj: '11.222.333/0001-44',
    email: 'pedidos@premiumbebidas.com',
    phone: '(71) 3444-5555',
    address: 'Rua Premium, 321 - Lauro de Freitas/BA',
    paymentTerms: '45 dias',
    deliveryTime: 5,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

export const initialEmployees: Employee[] = [
  {
    id: 'e1',
    name: 'João Santos',
    cpf: '111.222.333-44',
    phone: '(75) 90000-0001',
    email: 'joao@bardocarneiro.com',
    role: 'Gerente',
    admissionDate: '2024-01-10',
    observations: 'Gerente geral do estabelecimento',
    shift: 'noite',
    baseSalary: 3500,
    canAdjustStock: true,
    active: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'e2',
    name: 'Marina Araújo',
    cpf: '222.333.444-55',
    phone: '(75) 90000-0002',
    email: 'marina@bardocarneiro.com',
    role: 'Barman',
    admissionDate: '2024-06-05',
    observations: 'Especialista em coquetéis',
    shift: 'tarde',
    baseSalary: 2800,
    canAdjustStock: true,
    active: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'e3',
    name: 'Carlos Lima',
    cpf: '333.444.555-66',
    phone: '(75) 90000-0003',
    email: 'carlos@bardocarneiro.com',
    role: 'Garçom',
    admissionDate: '2025-02-01',
    observations: 'Atendimento ao cliente',
    shift: 'manhã',
    baseSalary: 2200,
    canAdjustStock: false,
    active: false,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'e4',
    name: 'Ana Costa',
    cpf: '444.555.666-77',
    phone: '(75) 90000-0004',
    email: 'ana@bardocarneiro.com',
    role: 'Caixa',
    admissionDate: '2024-03-15',
    observations: 'Controle de caixa e vendas',
    shift: 'tarde',
    baseSalary: 2500,
    canAdjustStock: false,
    active: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

export const initialProducts: Product[] = [
  {
    id: 'p1',
    name: 'Cerveja Pilsen 350ml',
    sku: 'CZ-PILSEN-350',
    ean: '7890000000011',
    category: 'Cervejas',
    supplierId: 's1',
    unit: 'lata',
    contentMl: 350,
    abv: 4.5,
    cost: 3.2,
    price: 7.5,
    stock: 96,
    minStock: 24,
    maxStock: 120,
    location: 'Geladeira 1',
    expiry: '2025-11-30',
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p2',
    name: 'Refrigerante Cola 2L',
    sku: 'RF-COLA-2L',
    ean: '7890000000028',
    category: 'Refrigerantes',
    supplierId: 's2',
    unit: 'garrafa',
    contentMl: 2000,
    abv: 0,
    cost: 6.0,
    price: 12.0,
    stock: 18,
    minStock: 10,
    maxStock: 30,
    location: 'Prateleira A',
    expiry: '2026-02-15',
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p3',
    name: 'Cachaça Ouro 1L',
    sku: 'CC-OURO-1L',
    ean: '7890000000035',
    category: 'Destilados',
    supplierId: 's3',
    unit: 'garrafa',
    contentMl: 1000,
    abv: 39,
    cost: 18.5,
    price: 42,
    stock: 8,
    minStock: 6,
    maxStock: 15,
    location: 'Prateleira B',
    expiry: null,
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p4',
    name: 'Vodka Premium 750ml',
    sku: 'VD-PREMIUM-750',
    ean: '7890000000042',
    category: 'Destilados',
    supplierId: 's4',
    unit: 'garrafa',
    contentMl: 750,
    abv: 40,
    cost: 45.0,
    price: 95.0,
    stock: 12,
    minStock: 8,
    maxStock: 20,
    location: 'Prateleira B',
    expiry: null,
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p5',
    name: 'Cerveja IPA 473ml',
    sku: 'CZ-IPA-473',
    ean: '7890000000059',
    category: 'Cervejas',
    supplierId: 's1',
    unit: 'lata',
    contentMl: 473,
    abv: 6.2,
    cost: 4.8,
    price: 11.0,
    stock: 45,
    minStock: 20,
    maxStock: 60,
    location: 'Geladeira 2',
    expiry: '2025-10-15',
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p6',
    name: 'Refrigerante Guaraná 1L',
    sku: 'RF-GUARANA-1L',
    ean: '7890000000066',
    category: 'Refrigerantes',
    supplierId: 's2',
    unit: 'garrafa',
    contentMl: 1000,
    abv: 0,
    cost: 3.5,
    price: 7.0,
    stock: 25,
    minStock: 15,
    maxStock: 40,
    location: 'Prateleira A',
    expiry: '2026-01-20',
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p7',
    name: 'Whisky 12 Anos 750ml',
    sku: 'WH-12ANOS-750',
    ean: '7890000000073',
    category: 'Destilados',
    supplierId: 's4',
    unit: 'garrafa',
    contentMl: 750,
    abv: 43,
    cost: 120.0,
    price: 280.0,
    stock: 6,
    minStock: 4,
    maxStock: 12,
    location: 'Prateleira C',
    expiry: null,
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    id: 'p8',
    name: 'Cerveja Stout 330ml',
    sku: 'CZ-STOUT-330',
    ean: '7890000000080',
    category: 'Cervejas',
    supplierId: 's1',
    unit: 'garrafa',
    contentMl: 330,
    abv: 5.8,
    cost: 5.2,
    price: 12.5,
    stock: 32,
    minStock: 18,
    maxStock: 50,
    location: 'Geladeira 1',
    expiry: '2025-12-10',
    image: undefined,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

export const initialSettings: Settings = {
  id: 'settings',
  brandName: 'BAR DO CARNEIRO',
  logo: undefined,
  theme: 'light',
  primaryColor: '#C1121F',
  alertDays: 7,
  currency: 'BRL',
  timezone: 'America/Bahia',
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
};

// Gerar movimentações aleatórias para as últimas 2 semanas
export const generateInitialMoves = (): StockMove[] => {
  const moves: StockMove[] = [];
  const now = new Date();
  const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
  
  // Produtos que podem ter movimentações
  const productIds = initialProducts.map(p => p.id);
  const employeeIds = initialEmployees.filter(e => e.active).map(e => e.id);
  
  // Gerar entre 40-80 movimentações
  const numMoves = Math.floor(Math.random() * 41) + 40;
  
  for (let i = 0; i < numMoves; i++) {
    const isEntry = Math.random() > 0.6; // 40% entradas, 60% saídas
    const productId = productIds[Math.floor(Math.random() * productIds.length)];
    const employeeId = employeeIds[Math.floor(Math.random() * employeeIds.length)];
    const date = new Date(twoWeeksAgo.getTime() + Math.random() * (now.getTime() - twoWeeksAgo.getTime()));
    
    const move: StockMove = {
      id: `move_${i + 1}`,
      productId,
      type: isEntry ? 'entrada' : 'saída',
      quantity: Math.floor(Math.random() * 20) + 1,
      unitCost: isEntry ? Math.random() * 50 + 5 : undefined,
      unitPrice: !isEntry ? Math.random() * 100 + 10 : undefined,
      reason: isEntry 
        ? 'compra' 
        : ['venda', 'perda', 'consumo_interno'][Math.floor(Math.random() * 3)],
      notes: Math.random() > 0.7 ? 'Movimentação automática' : undefined,
      employeeId,
      date: date.toISOString(),
      createdAt: date.toISOString(),
    };
    
    moves.push(move);
  }
  
  // Ordenar por data
  return moves.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
};

export const initialMoves = generateInitialMoves();

